diff -ruN spectemu-0.95.3/Makefile.in spectemu_mysql-0.95.3/Makefile.in
--- spectemu-0.95.3/Makefile.in	Sat Jan  9 17:32:05 1999
+++ spectemu_mysql-0.95.3/Makefile.in	Fri Oct 12 12:04:09 2001
@@ -10,7 +10,7 @@
 CC = @CC@
 CPP = @CPP@
 CFLAGS = @CFLAGS@
-CPPFLAGS = @DEFS@ @CPPFLAGS@ @X_CFLAGS@ -DDATADIR=\""$(datadir)"\" -I. -I$(srcdir)
+CPPFLAGS = -DDMYSQL @DEFS@ @CPPFLAGS@ @X_CFLAGS@ -DDATADIR=\""$(datadir)"\" -I. -I$(srcdir)
 INSTALL = @INSTALL@
 INSTALL_PROGRAM = @INSTALL_PROGRAM@
 INSTALL_DATA = @INSTALL_DATA@
@@ -20,6 +20,7 @@
 vgalib = @vgalib@
 xlibs = @xlibs@
 rllibs = @rllibs@
+mysqllibs = -lmysqlclient
 avfslib = @avfslib@
 
 
@@ -32,7 +33,7 @@
 .c.s:
 	$(CC) -S $(CFLAGS) $(CPPFLAGS) $<
 
-progs = @progs@
+progs = @progs@ enc64 tapeout
 
 all: $(progs)
 
@@ -44,6 +45,10 @@
 	   $(INSTALL_PROGRAM) -s -m 4755 xspect $(bindir); fi
 	if test -f vgaspect; then \
 	   $(INSTALL_PROGRAM) -s -m 4755 vgaspect $(bindir); fi
+	if test -f enc64; then \
+	   $(INSTALL_PROGRAM) -s -m 4755 enc64 $(bindir); fi
+	if test -f tapeout; then \
+	   $(INSTALL_PROGRAM) -s -m 4755 tapeout $(bindir); fi
 
 install_man:
 	$(INSTALL_DATA) $(srcdir)/xspect.1 $(mandir)
@@ -71,20 +76,27 @@
 xspect_objs=xspect.o xscr.o xutils.o xkey.o \
             ax.o spectkey.o xdispkb.o $(spect_objs)
 
+encoder_objs=enc64.o codes.o
+
 xspect: $(xspect_objs)
-	$(CC) -o xspect $(LDFLAGS) $(xspect_objs) $(xlibs) $(rllibs) $(avfslib)
+	$(CC) -o xspect $(LDFLAGS) $(xspect_objs) $(xlibs) $(rllibs) $(avfslib) $(mysqllibs)
 
 vgaspect_objs=vgaspect.o vgascr.o vgakey.o  $(spect_objs)
+
 vgaspect: $(vgaspect_objs)
-	$(CC) -o vgaspect $(LDFLAGS) $(vgaspect_objs) $(vgalib) $(rllibs) $(avfslib)
+	$(CC) -o vgaspect $(LDFLAGS) $(vgaspect_objs) $(vgalib) $(rllibs) $(avfslib) $(mysqllibs)
 
 
+enc64: $(encoder_objs)
+	$(CC) -o enc64 $(encoder_objs)
+
 tapeout_objs=tapeout.o tapefile.o misc.o
+
 tapeout: $(tapeout_objs)
 	$(CC) -o tapeout $(LDFLAGS) $(tapeout_objs)
 
 i386emul.sp: $(srcdir)/i386step.S
-	$(CPP) $(CPPFLAGS) $(srcdir)/i386step.S > i386emul.sp
+#	$(CPP) $(CPPFLAGS) $(srcdir)/i386step.S > i386emul.sp
 
 i386emul.s: i386emul.sp sp_to_s
 	./sp_to_s < i386emul.sp > i386emul.s
@@ -108,12 +120,12 @@
 	$(CC) -o bin_to_c $(LDFLAGS) bin_to_c.o
 
 distclean:
-	rm -f *~ *.o *.sp z80*.s i386emul.s bin_to_c sp_to_s
+	rm -f *~ *.o z80*.s i386emul.s bin_to_c sp_to_s
 	rm -f spectkey.c rom_imag.c loadim.c
 	rm -f Makefile.old gmon.out
 
 clean: distclean
-	rm -f xspect vgaspect tapeout
+	rm -f xspect vgaspect tapeout enc64
 
 realclean: clean
 	rm -f config.status config.cache config.log
diff -ruN spectemu-0.95.3/codes.c spectemu_mysql-0.95.3/codes.c
--- spectemu-0.95.3/codes.c	Thu Jan  1 01:00:00 1970
+++ spectemu_mysql-0.95.3/codes.c	Fri Oct 12 11:48:06 2001
@@ -0,0 +1,433 @@
+/*
+Copyright (c) 1991 Bell Communications Research, Inc. (Bellcore)
+
+Permission to use, copy, modify, and distribute this material 
+for any purpose and without fee is hereby granted, provided 
+that the above copyright notice and this permission notice 
+appear in all copies, and that the name of Bellcore not be 
+used in advertising or publicity pertaining to this 
+material without the specific, prior written permission 
+of an authorized representative of Bellcore.  BELLCORE 
+MAKES NO REPRESENTATIONS ABOUT THE ACCURACY OR SUITABILITY 
+OF THIS MATERIAL FOR ANY PURPOSE.  IT IS PROVIDED "AS IS", 
+WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES.
+*/
+#include <stdio.h>
+#include <ctype.h>
+
+extern char *index();
+static char basis_64[] =
+   "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
+
+static char index_64[128] = {
+    -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1,
+    -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1,
+    -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,62, -1,-1,-1,63,
+    52,53,54,55, 56,57,58,59, 60,61,-1,-1, -1,-1,-1,-1,
+    -1, 0, 1, 2,  3, 4, 5, 6,  7, 8, 9,10, 11,12,13,14,
+    15,16,17,18, 19,20,21,22, 23,24,25,-1, -1,-1,-1,-1,
+    -1,26,27,28, 29,30,31,32, 33,34,35,36, 37,38,39,40,
+    41,42,43,44, 45,46,47,48, 49,50,51,-1, -1,-1,-1,-1
+};
+
+#define char64(c)  (((c) < 0 || (c) > 127) ? -1 : index_64[(c)])
+
+/*
+char64(c)
+char c;
+{
+    char *s = (char *) index(basis_64, c);
+    if (s) return(s-basis_64);
+    return(-1);
+}
+*/
+
+/* the following gets a character, but fakes it properly into two chars if there's a newline character */
+static int InNewline=0;
+
+int nextcharin(infile, PortableNewlines)
+FILE *infile;
+int PortableNewlines;
+{
+    int c;
+
+#ifndef NEWLINE_CHAR
+    return(getc(infile));
+#else
+    if (!PortableNewlines) return(getc(infile));
+    if (InNewline) {
+        InNewline = 0;
+        return(10); /* LF */
+    }
+    c = getc(infile);
+    if (c == NEWLINE_CHAR) {
+        InNewline = 1;
+        return(13); /* CR */
+    }
+    return(c);
+#endif
+}
+
+to64(infile, outfile, PortableNewlines) 
+FILE *infile, *outfile;
+int PortableNewlines;
+{
+    int c1, c2, c3, ct=0;
+    InNewline = 0; /* always reset it */
+    while ((c1 = nextcharin(infile, PortableNewlines)) != EOF) {
+        c2 = nextcharin(infile, PortableNewlines);
+        if (c2 == EOF) {
+            output64chunk(c1, 0, 0, 2, outfile);
+        } else {
+            c3 = nextcharin(infile, PortableNewlines);
+            if (c3 == EOF) {
+                output64chunk(c1, c2, 0, 1, outfile);
+            } else {
+                output64chunk(c1, c2, c3, 0, outfile);
+            }
+        }
+        ct += 4;
+//        if (ct > 71) {
+//            putc('\n', outfile);
+//            ct = 0;
+//        }
+    }
+//    if (ct) putc('\n', outfile);
+//    fflush(outfile);
+}
+
+output64chunk(c1, c2, c3, pads, outfile)
+FILE *outfile;
+{
+    putc(basis_64[c1>>2], outfile);
+    putc(basis_64[((c1 & 0x3)<< 4) | ((c2 & 0xF0) >> 4)], outfile);
+    if (pads == 2) {
+        putc('=', outfile);
+        putc('=', outfile);
+    } else if (pads) {
+        putc(basis_64[((c2 & 0xF) << 2) | ((c3 & 0xC0) >>6)], outfile);
+        putc('=', outfile);
+    } else {
+        putc(basis_64[((c2 & 0xF) << 2) | ((c3 & 0xC0) >>6)], outfile);
+        putc(basis_64[c3 & 0x3F], outfile);
+    }
+}
+
+PendingBoundary(s, Boundaries, BoundaryCt)
+char *s;
+char **Boundaries;
+int *BoundaryCt;
+{
+    int i, len;
+
+    if (s[0] != '-' || s[1] != '-') return(0);
+
+
+    for (i=0; i < *BoundaryCt; ++i) {
+	len = strlen(Boundaries[i]);
+        if (!strncmp(s, Boundaries[i], len)) {
+            if (s[len] == '-' && s[len+1] == '-') *BoundaryCt = i;
+            return(1);
+        }
+    }
+    return(0);
+}
+
+/* If we're in portable newline mode, we have to convert CRLF to the 
+    local newline convention on output */
+
+static int CRpending = 0;
+
+#ifdef NEWLINE_CHAR
+almostputc(c, outfile, PortableNewlines)
+int c;
+FILE *outfile;
+int PortableNewlines;
+{
+    if (CRpending) {
+        if (c == 10) {
+            putc(NEWLINE_CHAR, outfile);
+            CRpending = 0;
+        } else {
+            putc(13, outfile);
+	    if (c != 13) {
+            	putc(c, outfile);
+		CRpending = 0;
+	    }
+        }
+    } else {
+        if (PortableNewlines && c == 13) {
+            CRpending = 1;
+        } else {
+            putc(c, outfile);
+        }
+    }
+}
+#else
+almostputc(c, outfile, PortableNewlines)
+int c;
+FILE *outfile;
+int PortableNewlines;
+{
+    putc(c, outfile);
+}
+#endif
+
+from64(infile, outfile, boundaries, boundaryct, PortableNewlines) 
+FILE *infile, *outfile;
+char **boundaries;
+int *boundaryct;
+int PortableNewlines;
+{
+    int c1, c2, c3, c4;
+    int newline = 1, DataDone = 0;
+
+    /* always reinitialize */
+    CRpending = 0;
+    while ((c1 = getc(infile)) != EOF) {
+        if (isspace(c1)) {
+            if (c1 == '\n') {
+                newline = 1;
+            } else {
+                newline = 0;
+            }
+            continue;
+        }
+        if (newline && boundaries && c1 == '-') {
+            char Buf[200];
+            /* a dash is NOT base 64, so all bets are off if NOT a boundary */
+            ungetc(c1, infile);
+            fgets(Buf, sizeof(Buf), infile);
+            if (boundaries
+                 && (Buf[0] == '-')
+                 && (Buf[1] == '-')
+                 && PendingBoundary(Buf, boundaries, boundaryct)) {
+                return;
+            }
+            fprintf(stderr, "Ignoring unrecognized boundary line: %s\n", Buf);
+            continue;
+        }
+        if (DataDone) continue;
+        newline = 0;
+        do {
+            c2 = getc(infile);
+        } while (c2 != EOF && isspace(c2));
+        do {
+            c3 = getc(infile);
+        } while (c3 != EOF && isspace(c3));
+        do {
+            c4 = getc(infile);
+        } while (c4 != EOF && isspace(c4));
+        if (c2 == EOF || c3 == EOF || c4 == EOF) {
+            fprintf(stderr, "Warning: base64 decoder saw premature EOF!\n");
+            return;
+        }
+        if (c1 == '=' || c2 == '=') {
+            DataDone=1;
+            continue;
+        }
+        c1 = char64(c1);
+        c2 = char64(c2);
+        almostputc(((c1<<2) | ((c2&0x30)>>4)), outfile, PortableNewlines);
+        if (c3 == '=') {
+            DataDone = 1;
+        } else {
+            c3 = char64(c3);
+            almostputc((((c2&0XF) << 4) | ((c3&0x3C) >> 2)), outfile, PortableNewlines);
+            if (c4 == '=') {
+                DataDone = 1;
+            } else {
+                c4 = char64(c4);
+                almostputc((((c3&0x03) <<6) | c4), outfile, PortableNewlines);
+            }
+        }
+    }
+    if (CRpending) putc(13, outfile); /* Don't drop a lone trailing char 13 */
+}
+
+static char basis_hex[] = "0123456789ABCDEF";
+static char index_hex[128] = {
+    -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1,
+    -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1,
+    -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1,
+     0, 1, 2, 3,  4, 5, 6, 7,  8, 9,-1,-1, -1,-1,-1,-1,
+    -1,10,11,12, 13,14,15,-1, -1,-1,-1,-1, -1,-1,-1,-1,
+    -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1,
+    -1,10,11,12, 13,14,15,-1, -1,-1,-1,-1, -1,-1,-1,-1,
+    -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1
+};
+
+/* The following version generated complaints on Solaris. */
+/* #define hexchar(c)  (((c) < 0 || (c) > 127) ? -1 : index_hex[(c)])  */
+/*  Since we're no longer ever calling it with anything signed, this should work: */
+#define hexchar(c)  (((c) > 127) ? -1 : index_hex[(c)])
+
+/*
+hexchar(c)
+char c;
+{
+    char *s;
+    if (islower(c)) c = toupper(c);
+    s = (char *) index(basis_hex, c);
+    if (s) return(s-basis_hex);
+    return(-1);
+}
+*/
+
+toqp(infile, outfile) 
+FILE *infile, *outfile;
+{
+    int c, ct=0, prevc=255;
+    while ((c = getc(infile)) != EOF) {
+        if ((c < 32 && (c != '\n' && c != '\t'))
+             || (c == '=')
+             || (c >= 127)
+             /* Following line is to avoid single periods alone on lines,
+               which messes up some dumb smtp implementations, sigh... */
+             || (ct == 0 && c == '.')) {
+            putc('=', outfile);
+            putc(basis_hex[c>>4], outfile);
+            putc(basis_hex[c&0xF], outfile);
+            ct += 3;
+            prevc = 'A'; /* close enough */
+        } else if (c == '\n') {
+            if (prevc == ' ' || prevc == '\t') {
+                putc('=', outfile); /* soft & hard lines */
+                putc(c, outfile);
+            }
+            putc(c, outfile);
+            ct = 0;
+            prevc = c;
+        } else {
+            if (c == 'F' && prevc == '\n') {
+                /* HORRIBLE but clever hack suggested by MTR for sendmail-avoidance */
+                c = getc(infile);
+                if (c == 'r') {
+                    c = getc(infile);
+                    if (c == 'o') {
+                        c = getc(infile);
+                        if (c == 'm') {
+                            c = getc(infile);
+                            if (c == ' ') {
+                                /* This is the case we are looking for */
+                                fputs("=46rom", outfile);
+                                ct += 6;
+                            } else {
+                                fputs("From", outfile);
+                                ct += 4;
+                            }
+                        } else {
+                            fputs("Fro", outfile);
+                            ct += 3;
+                        }
+                    } else {
+                        fputs("Fr", outfile);
+                        ct += 2;
+                    }
+                } else {
+                    putc('F', outfile);
+                    ++ct;
+                }
+                ungetc(c, infile);
+                prevc = 'x'; /* close enough -- printable */
+            } else { /* END horrible hack */
+                putc(c, outfile);
+                ++ct;
+                prevc = c;
+            }
+        }
+        if (ct > 72) {
+            putc('=', outfile);
+            putc('\n', outfile);
+            ct = 0;
+            prevc = '\n';
+        }
+    }
+    if (ct) {
+        putc('=', outfile);
+        putc('\n', outfile);
+    }
+}
+
+fromqp(infile, outfile, boundaries, boundaryct) 
+FILE *infile, *outfile;
+char **boundaries;
+int *boundaryct;
+{
+    unsigned int c1, c2;
+    int sawnewline = 1, neednewline = 0;
+    /* The neednewline hack is necessary because the newline leading into 
+      a multipart boundary is part of the boundary, not the data */
+
+    while ((c1 = getc(infile)) != EOF) {
+        if (sawnewline && boundaries && (c1 == '-')) {
+            char Buf[200];
+            unsigned char *s;
+
+            ungetc(c1, infile);
+            fgets(Buf, sizeof(Buf), infile);
+            if (boundaries
+                 && (Buf[0] == '-')
+                 && (Buf[1] == '-')
+                 && PendingBoundary(Buf, boundaries, boundaryct)) {
+                return;
+            }
+            /* Not a boundary, now we must treat THIS line as q-p, sigh */
+            if (neednewline) {
+                putc('\n', outfile);
+                neednewline = 0;
+            }
+            for (s=(unsigned char *) Buf; *s; ++s) {
+                if (*s == '=') {
+                    if (!*++s) break;
+                    if (*s == '\n') {
+                        /* ignore it */
+                        sawnewline = 1;
+                    } else {
+                        c1 = hexchar(*s);
+                        if (!*++s) break;
+                        c2 = hexchar(*s);
+                        putc(c1<<4 | c2, outfile);
+                    }
+                } else {
+#ifdef MSDOS
+                    if (*s == '\n')
+                        putc('\r', outfile);	/* insert CR for binary-mode write */
+#endif
+                    putc(*s, outfile);
+                }
+            }
+        } else {
+            if (neednewline) {
+                putc('\n', outfile);
+                neednewline = 0;
+            }
+            if (c1 == '=') {
+                sawnewline = 0;
+                c1 = getc(infile);
+                if (c1 == '\n') {
+                    /* ignore it */
+                    sawnewline = 1;
+                } else {
+                    c2 = getc(infile);
+                    c1 = hexchar(c1);
+                    c2 = hexchar(c2);
+                    putc(c1<<4 | c2, outfile);
+                    if (c2 == '\n') sawnewline = 1;
+                }
+            } else {
+                if (c1 == '\n') {
+                    sawnewline = 1;
+                    neednewline = 1;
+                } else {
+                    sawnewline = 0;
+                    putc(c1, outfile);
+                }
+            }
+        }
+    }
+    if (neednewline) {
+        putc('\n', outfile);
+        neednewline = 0;
+    }    
+}
diff -ruN spectemu-0.95.3/enc64.c spectemu_mysql-0.95.3/enc64.c
--- spectemu-0.95.3/enc64.c	Thu Jan  1 01:00:00 1970
+++ spectemu_mysql-0.95.3/enc64.c	Fri Oct 12 11:48:53 2001
@@ -0,0 +1,91 @@
+/*
+Copyright (c) 1991 Bell Communications Research, Inc. (Bellcore)
+
+Permission to use, copy, modify, and distribute this material 
+for any purpose and without fee is hereby granted, provided 
+that the above copyright notice and this permission notice 
+appear in all copies, and that the name of Bellcore not be 
+used in advertising or publicity pertaining to this 
+material without the specific, prior written permission 
+of an authorized representative of Bellcore.  BELLCORE 
+MAKES NO REPRESENTATIONS ABOUT THE ACCURACY OR SUITABILITY 
+OF THIS MATERIAL FOR ANY PURPOSE.  IT IS PROVIDED "AS IS", 
+WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES.
+*/
+#include <stdio.h>
+
+#define BASE64 1
+#define QP 2 /* quoted-printable */
+
+main(argc, argv)
+int argc;
+char **argv;
+{
+    int encode = 1, which = BASE64, i, portablenewlines = 0;
+    FILE *fp = stdin;
+    FILE *fpo = stdout;
+
+    for (i=1; i<argc; ++i) {
+        if (argv[i][0] == '-') {
+	    switch (argv[i][1]) {
+		case 'o':
+		    if (++i >= argc) {
+			fprintf(stderr, "mimencode: -o requires a file name.\n");
+			exit(-1);
+		    }
+		    fpo = fopen(argv[i], "w");
+		    if (!fpo) {
+			perror(argv[i]);
+			exit(-1);
+		    }
+		    break;
+                case 'u':
+                    encode = 0;
+                    break;
+                case 'q':
+                    which = QP;
+                    break;
+                case 'p':
+                    portablenewlines = 1;
+                    break;
+                case 'b':
+                    which = BASE64;
+                    break;
+		default:
+                    fprintf(stderr,
+                       "Usage: mmencode [-u] [-q] [-b] [-p] [-o outputfile] [file name]\n");
+                    exit(-1);
+            }
+        } else {
+#ifdef MSDOS
+            if (encode)
+                fp = fopen(argv[i], "rb");
+            else
+            {
+                fp = fopen(argv[i], "rt");
+                setmode(fileno(fpo), O_BINARY);
+            } /* else */
+#else
+            fp = fopen(argv[i], "r");
+#endif /* MSDOS */
+            if (!fp) {
+                perror(argv[i]);
+                exit(-1);
+            }
+        }
+    }
+#ifdef MSDOS
+    if (fp == stdin) setmode(fileno(fp), O_BINARY);
+#endif /* MSDOS */
+    if (which == BASE64) {
+        if (encode) {
+            to64(fp, fpo, portablenewlines);
+        } else {
+            from64(fp,fpo, (char **) NULL, (int *) 0, portablenewlines);
+        }
+    } else {
+        if (encode) toqp(fp, fpo); else fromqp(fp, fpo, NULL, 0);
+    }
+    return(0);
+}
+
diff -ruN spectemu-0.95.3/spconf.c spectemu_mysql-0.95.3/spconf.c
--- spectemu-0.95.3/spconf.c	Tue Jan 12 13:18:31 1999
+++ spectemu_mysql-0.95.3/spconf.c	Sat Oct 13 11:49:28 2001
@@ -24,7 +24,9 @@
 #include "interf.h"
 #include "spscr_p.h"
 #include "spkey.h"
-
+#ifdef DMYSQL
+#include "spmain.h"
+#endif
 #include "snapshot.h"   /* for SN_Z80  and SN_SNA  */
 #include "tapefile.h"   /* for TAP_TAP and TAP_TZX */
 
@@ -415,11 +417,18 @@
     usage();
     exit(0);
     break;
-    
+#ifdef DMYSQL
+  case OPT_VERSION:
+    fprintf(stderr, "ZxSpectrum emulator version: %s\n", SPECTEMU_VERSION);
+    fprintf(stderr, "MySQL driver version: %s.%s\n", SQLDRV_MAJV,SQLDRV_MINV);
+    exit(0);
+    break;
+#else    
   case OPT_VERSION:
     fprintf(stderr, "%s\n", SPECTEMU_VERSION);
     exit(0);
     break;
+#endif
   }
 }
 
@@ -738,8 +747,12 @@
       
       if(!spcf_find_file(argv[a], filenamebuf, &file_type, &file_subtype)) {
 	fprintf(stderr, "Can't find file '%s'\n", argv[a]);
+#ifdef DMYSQL
+#else
 	exit(1);
+#endif
       }
+
       
       if(file_type == FT_SNAPSHOT) {
 	spcf_init_snapshot = make_string(spcf_init_snapshot, filenamebuf);
diff -ruN spectemu-0.95.3/spectemu.spec spectemu_mysql-0.95.3/spectemu.spec
--- spectemu-0.95.3/spectemu.spec	Thu May 21 23:27:03 1998
+++ spectemu_mysql-0.95.3/spectemu.spec	Thu Jan  1 01:00:00 1970
@@ -1,45 +0,0 @@
-Summary: Sinclair ZX Spectrum emulator
-Name: spectemu
-Version: 0.94
-Release: 1
-Copyright: GPL
-Group: Applications/Emulators
-Source: http://www.inf.bme.hu/~mszeredi/spectemu/spectemu-0.94.tar.gz
-
-%description
-This package contains a 48k ZX-Spectrum emulator for Linux, with full
-Z80 instruction set, comprehensive screen, sound and tape emulation,
-and snapshot file saving and loading.
-
-%prep
-%setup
-
-%build
-./configure
-make
-
-%install
-spectdir=/usr/local/share/spectemu
-if test -e $spectdir/spectemu.cfg; then
-  mv $spectdir/spectemu.cfg $spectdir/spectemu.cfg.orig
-fi
-make install
-mv $spectdir/spectemu.cfg $spectdir/spectemu.cfg.tmpl
-
-%post
-spectdir=/usr/local/share/spectemu
-if test ! -e $spectdir/spectemu.cfg; then
-  cp $spectdir/spectemu.cfg.tmpl $spectdir/spectemu.cfg
-fi
-
-%files
-%doc README COPYING ChangeLog TODO spectemu.lsm
-/usr/local/bin/vgaspect
-/usr/local/bin/xspect
-/usr/local/man/man1/xspect.1
-/usr/local/man/man1/vgaspect.1
-/usr/local/share/spectemu/spectkey.gif
-/usr/local/share/spectemu/specsinc.xpm
-/usr/local/share/spectemu/example.cfg
-/usr/local/share/spectemu/spectemu.cfg.tmpl
-
diff -ruN spectemu-0.95.3/spmain.c spectemu_mysql-0.95.3/spmain.c
--- spectemu-0.95.3/spmain.c	Sat Jan  9 17:02:07 1999
+++ spectemu_mysql-0.95.3/spmain.c	Sat Oct 13 11:56:25 2001
@@ -236,7 +236,19 @@
   if(spcf_init_tapefile != NULL) {
     sprintf(msgbuf, "Loading tape '%s'", spcf_init_tapefile);
     put_msg(msgbuf);
+#ifdef DMYSQL
+    sprintf(msgbuf, "Try to find '%s' in MySQL database.", spcf_init_tapefile);
+    put_msg(msgbuf);
+    if(!(get_tape_file_from_mysql(spcf_init_tapefile)))
+        {
+            fprintf(stderr, "Can't find '%s' in MySQL database.\n", spcf_init_tapefile);
+	    start_play_file_type(spcf_init_tapefile, 0, spcf_init_tapefile_type);
+        } else {
+	    start_play_file_type("/tmp/tapefile.tap", 0, spcf_init_tapefile_type);
+	}
+#else
     start_play_file_type(spcf_init_tapefile, 0, spcf_init_tapefile_type);
+#endif
     if(!load_immed) pause_play();
     free_string(spcf_init_tapefile);
   }
@@ -244,13 +256,13 @@
 
 static void print_copyright(void)
 {
-  sprintf(msgbuf, 
-	  "Welcome to SPECTEMU version %s/%s (C) Szeredi Miklos 1996-1998", 
-	  SPECTEMU_VERSION, SPECTEMU_TYPE);
+  sprintf(msgbuf, "Welcome to SPECTEMU version %s/%s (C) Szeredi Miklos 1996-1998", SPECTEMU_VERSION, SPECTEMU_TYPE);
   put_msg(msgbuf);
-
-  put_msg("This program comes with NO WARRANTY, see the file COPYING "
-	  "for details");
+#ifdef DMYSQL
+  sprintf(msgbuf, "Using MySQL driver version %s.%s (C) Catalin Mihaila 2001", SQLDRV_MAJV, SQLDRV_MINV);
+  put_msg(msgbuf);
+#endif
+  put_msg("This program comes with NO WARRANTY, see the file COPYING for details");
   put_msg("Press Ctrl-h for help");
 }
 
diff -ruN spectemu-0.95.3/spmain.h spectemu_mysql-0.95.3/spmain.h
--- spectemu-0.95.3/spmain.h	Wed May 20 15:52:40 1998
+++ spectemu_mysql-0.95.3/spmain.h	Thu Oct 11 13:38:02 2001
@@ -26,4 +26,8 @@
 extern void spma_init_privileged(void);
 extern void spma_lose_privs(void);
 
+#ifdef DMYSQL
+#define SQLDRV_MAJV "1"
+#define SQLDRV_MINV "0"
+#endif
 #endif /* SPMAIN_H */
diff -ruN spectemu-0.95.3/sptape.c spectemu_mysql-0.95.3/sptape.c
--- spectemu-0.95.3/sptape.c	Sat Jan  9 15:20:24 1999
+++ spectemu_mysql-0.95.3/sptape.c	Sat Oct 13 12:14:27 2001
@@ -33,6 +33,20 @@
 #include <errno.h>
 #include <sys/types.h>
 
+#ifdef DMYSQL
+#include <mysql/mysql.h>
+#include <fcntl.h>
+#define SQLCMDL 1024
+#define SQLQSTR "SELECT %s FROM %s WHERE %s=\"%s\""
+#define SQLHOST "dns.digiro.net"
+#define SQLBASE "zxspectrum"
+#define SQLTABLE "spectrum_files"
+#define SQLUSER "zxuser"
+#define SQLPASS "sqlpass"
+#define SQLFC "file_content"
+#define SQLFN "file_name"
+#endif
+
 #define MAXLINELEN 256
 
 int spt_auto_stop = 0;
@@ -615,13 +629,153 @@
     put_msg(" * Stop the tape first! * ");
     return;
   }
-
   put_msg("Enter tape file path:");
   name = spif_get_tape_fileinfo(&seg, &t);
   if(name == NULL) return;
 
+#ifdef DMYSQL
+  sprintf(msgbuf, "Looking up for %s on MySQL database.", name);
+  put_msg(msgbuf);
+  if(!(get_tape_file_from_mysql(name)))
+    {
+	sprintf(msgbuf, "File %s not found on MySQL database.", name);
+	put_msg(msgbuf);
+	sprintf(msgbuf, "Loading %s from /usr/share/zx.", name);
+	put_msg(msgbuf);
+	sprintf(msgbuf,"/usr/share/zx/%s",name);
+	name = msgbuf;
+    } else {
+	name = "/tmp/tapefile.tap";
+    }
+#endif
+
   start_play_file_type(name, seg, -1); 
 }
+
+
+#ifdef DMYSQL
+int get_tape_file_from_mysql(name)
+char *name;
+{
+  char *mysqlcmd;
+  int sql_len;
+  int outfis;
+  MYSQL mysqldb;
+  MYSQL_RES *res;
+  MYSQL_ROW row;
+
+
+/* Connecting to MySQL server */
+
+  sprintf(msgbuf, "Connecting to MySQL server: %s",SQLHOST);
+  put_msg(msgbuf);
+
+  if (!(mysql_connect(&mysqldb,SQLHOST,SQLUSER,SQLPASS)))
+    {
+	sprintf(msgbuf, "MySQL driver error: cannot connect as %s.",SQLUSER);
+	put_msg(msgbuf);
+        return(0);
+    }
+
+
+/* Select database */
+
+  if (mysql_select_db(&mysqldb,SQLBASE))
+    {
+	sprintf(msgbuf, "MySQL driver error: cannot find database named %s.",SQLBASE);
+	put_msg(msgbuf);
+	return(0);
+    }
+
+
+/* Check select string length */
+
+  sql_len=strlen(SQLFC)+strlen(SQLTABLE)+strlen(SQLFN)+strlen(name)+strlen(SQLQSTR);
+
+  if (sql_len> SQLCMDL)
+    {
+	put_msg("MySQL driver error: Sql cmd exceed alowed limits");
+	return(0);
+    }
+
+/* Prepare select string */
+
+  mysqlcmd=(char *) malloc(sql_len);
+
+  if(mysqlcmd==NULL)
+    {
+	put_msg("MySQL driver error: mysqlcmd malloc error");
+	return(0);
+    }
+
+  sprintf(mysqlcmd,SQLQSTR,SQLFC,SQLTABLE,SQLFN,name);
+
+////  put_msg(mysqlcmd);
+
+
+/*  Query database */
+
+  if (mysql_query(&mysqldb,mysqlcmd))
+    {
+	put_msg("MySQL driver error: cannot query database");
+	mysql_close(&mysqldb);
+	free(mysqlcmd);
+	return(0);
+    }
+
+  free(mysqlcmd);
+
+  if (!(res = mysql_store_result(&mysqldb)))
+    {
+	put_msg("MySQL driver error: cannot store result");
+	mysql_close(&mysqldb);
+	return(0);
+    }
+
+  if(!(row = mysql_fetch_row(res)))
+    {
+//    	put_msg("MySQL driver error: cannot fetch row");
+	mysql_close(&mysqldb);
+	return(0);
+    }
+
+  if (strlen(row[0]) <=0 )
+    {
+	put_msg("MySQL driver error: content of file is NULL");
+	mysql_close(&mysqldb);
+	return(0);
+    }
+
+
+  if (!mysql_eof(res))
+    {
+	put_msg("MySQL driver error:  Result not end!!");
+	mysql_close(&mysqldb);
+	return(0);
+    }
+
+
+  sprintf(msgbuf, "Loading %s from MySQL database.", name);
+  put_msg(msgbuf);
+
+  outfis = open("/tmp/outfromdb.tmp", O_CREAT | O_WRONLY | O_TRUNC);
+  write(outfis,row[0],strlen(row[0]));
+  close(outfis);
+
+  mysql_free_result(res);
+  mysql_close(&mysqldb);
+
+  sprintf(msgbuf, "Decoding %s.", name);
+  put_msg(msgbuf);
+
+  system("/usr/local/bin/enc64 -u /tmp/outfromdb.tmp >/tmp/tapefile.tap");
+
+  sprintf(msgbuf, "Playng %s.", name);
+  put_msg(msgbuf);
+
+  return(1);
+}
+#endif
 
 
 void stop_play(void)
Binary files spectemu-0.95.3/utils/filt and spectemu_mysql-0.95.3/utils/filt differ
Binary files spectemu-0.95.3/utils/recs and spectemu_mysql-0.95.3/utils/recs differ
diff -ruN spectemu-0.95.3/utils/recs.c spectemu_mysql-0.95.3/utils/recs.c
--- spectemu-0.95.3/utils/recs.c	Fri Nov 22 15:18:51 1996
+++ spectemu_mysql-0.95.3/utils/recs.c	Thu Oct 11 12:51:23 2001
@@ -7,7 +7,7 @@
 #include <fcntl.h>
 #include <sys/types.h>
 #include <unistd.h>
-
+#include <errno.h>
 
 #ifdef DEBUG_OUTPUT
 #  define DOUT(string) fprintf(stderr, "%s\n", string)
Binary files spectemu-0.95.3/utils/spconv/spconv and spectemu_mysql-0.95.3/utils/spconv/spconv differ
Binary files spectemu-0.95.3/utils/spconv/spconv.o and spectemu_mysql-0.95.3/utils/spconv/spconv.o differ
Binary files spectemu-0.95.3/utils/spload and spectemu_mysql-0.95.3/utils/spload differ
Binary files spectemu-0.95.3/utils/spt2tap and spectemu_mysql-0.95.3/utils/spt2tap differ
Binary files spectemu-0.95.3/utils/tap2spt and spectemu_mysql-0.95.3/utils/tap2spt differ
Binary files spectemu-0.95.3/utils/tapefile.o and spectemu_mysql-0.95.3/utils/tapefile.o differ
Binary files spectemu-0.95.3/utils/taplist and spectemu_mysql-0.95.3/utils/taplist differ
Binary files spectemu-0.95.3/utils/tzxlist and spectemu_mysql-0.95.3/utils/tzxlist differ
Binary files spectemu-0.95.3/utils/tzxlist.o and spectemu_mysql-0.95.3/utils/tzxlist.o differ
